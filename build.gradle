import java.time.Duration

plugins {
  id "org.owasp.dependencycheck" version "6.5.3"
  id 'jacoco'
  id 'com.diffplug.gradle.spotless' version '3.25.0'
  id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
  id "org.javamodularity.moduleplugin" version "1.8.8"
  id 'org.ec4j.editorconfig' version '0.0.3'
  id "io.swagger.core.v3.swagger-gradle-plugin" version "2.1.9" apply false
}

ext {
  jettyVersion = "11.0.6"
  eclipselinkVersion = "3.0.2"
  swaggerVersion = "2.1.9"
  jerseyVersion = "3.0.3"
  slf4jVersion = "1.7.32"
  logbackVersion = "1.2.10"
  hk2Version = "3.0.2"
  jacksonVersion = "2.12.4";
}

allprojects {
  group = "net.consensys.quorum.tessera"
  plugins.withType(JavaLibraryPlugin).configureEach {
    java {
      modularity.inferModulePath = true
    }
  }

  project.version = rootProject.file("version.txt").text.trim()

  plugins.withType(JavaLibraryPlugin).whenPluginAdded {

    dependencies {
      constraints {
        api "org.slf4j:slf4j-api:$slf4jVersion"
        runtimeOnly "org.slf4j:jcl-over-slf4j:$slf4jVersion"
        runtimeOnly "org.slf4j:jul-to-slf4j:$slf4jVersion"
        runtimeOnly "ch.qos.logback:logback-classic:$logbackVersion"
        runtimeOnly "ch.qos.logback:logback-core:$logbackVersion"

        implementation "org.slf4j:jul-to-slf4j:$slf4jVersion" //required by jersey server
        testImplementation "org.slf4j:jul-to-slf4j:$slf4jVersion" //required by enclave jaxrs module

        implementation "org.eclipse.persistence:org.eclipse.persistence.moxy:$eclipselinkVersion"
        implementation "org.eclipse.persistence:org.eclipse.persistence.jpa:$eclipselinkVersion"
        implementation "org.eclipse.persistence:org.eclipse.persistence.extension:$eclipselinkVersion"
        implementation "org.eclipse.persistence:org.eclipse.persistence.asm:9.1.0"

        implementation "org.glassfish.hk2:hk2-api:$hk2Version"
        implementation "org.glassfish.hk2:hk2-metadata-generator:$hk2Version"
        testImplementation "org.glassfish.hk2:hk2-metadata-generator:$hk2Version"

        testImplementation "junit:junit:4.13"

        testImplementation "org.assertj:assertj-core:3.18.0"
        testImplementation "org.mockito:mockito-inline:3.4.4"

        testImplementation "com.github.jknack:handlebars:4.2.0"

        testImplementation "com.openpojo:openpojo:0.8.13"

        testImplementation "com.github.stefanbirkner:system-rules:1.19.0"

        testImplementation "nl.jqno.equalsverifier:equalsverifier:3.7.1"
        testImplementation "com.mockrunner:mockrunner-jdbc:2.0.4"

        implementation "commons-cli:commons-cli:1.5.0"
        implementation "commons-codec:commons-codec:1.15"
        implementation "commons-io:commons-io:2.11.0"
        implementation "org.apache.commons:commons-lang3:3.12.0"

        implementation "com.github.jnr:jnr-unixsocket:0.38.15"
        implementation "com.github.jnr:jffi:1.3.8"

        implementation "de.mkammerer:argon2-jvm:2.5"

        implementation "info.picocli:picocli:4.0.4"
        implementation "org.jasypt:jasypt:1.9.3"
        implementation "com.moandjiezana.toml:toml4j:0.7.2"

        implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
        implementation("org.glassfish.jersey.media:jersey-media-json-processing:$jerseyVersion")
        implementation("org.glassfish.jersey.media:jersey-media-moxy:$jerseyVersion")
        implementation "org.glassfish.jersey.test-framework:jersey-test-framework-core:$jerseyVersion"
        implementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2:$jerseyVersion"
        implementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-jetty:$jerseyVersion"
        implementation "org.glassfish.jersey.core:jersey-server:$jerseyVersion"
        implementation "org.glassfish.jersey.ext:jersey-bean-validation:$jerseyVersion"
        implementation "org.glassfish.jersey.containers:jersey-container-servlet-core:$jerseyVersion"
        implementation "org.glassfish.jersey.inject:jersey-hk2:$jerseyVersion"
        implementation "org.glassfish.jersey.core:jersey-common:$jerseyVersion"
        implementation "org.glassfish.jersey.core:jersey-client:$jerseyVersion"

        implementation "org.eclipse.jetty:jetty-unixsocket-common:$jettyVersion"
        implementation "org.eclipse.jetty:jetty-unixsocket-client:$jettyVersion"
        implementation "org.eclipse.jetty:jetty-unixsocket-server:$jettyVersion"

        implementation "org.eclipse.jetty:jetty-client:$jettyVersion"
        implementation "org.eclipse.jetty:jetty-servlet:$jettyVersion"

        implementation "org.eclipse.jetty:jetty-server:$jettyVersion"
        implementation "org.eclipse.jetty:jetty-http:$jettyVersion"
        implementation "org.eclipse.jetty:jetty-util:$jettyVersion"

        implementation "org.cryptacular:cryptacular:1.2.4"
        implementation "eu.neilalexander:jnacl:1.0.0"

        implementation("io.swagger.core.v3:swagger-annotations-jakarta:$swaggerVersion")
        implementation("io.swagger.core.v3:swagger-core-jakarta:$swaggerVersion")       //implementation "io.swagger.parser.v3:swagger-parser-jakarta:$swaggerVersion"
        implementation('io.swagger.parser.v3:swagger-parser-v3:2.0.27')
        implementation "io.swagger.core.v3:swagger-jaxrs2-jakarta:$swaggerVersion"

        implementation "org.bouncycastle:bcpkix-jdk15on:1.68"
        implementation "org.bouncycastle:bcprov-jdk15on:1.68"

        implementation "com.h2database:h2:2.1.210"
        implementation "com.zaxxer:HikariCP:3.2.0"
        implementation "org.hsqldb:hsqldb:2.5.1"
        implementation "org.xerial:sqlite-jdbc:3.23.1"

        api 'org.eclipse.jetty.toolchain:jetty-jakarta-servlet-api:5.0.2'
        api "jakarta.ws.rs:jakarta.ws.rs-api:3.0.0"
        api "jakarta.persistence:jakarta.persistence-api:3.0.0"
        api "jakarta.inject:jakarta.inject-api:1.0.1"
        api "jakarta.xml.bind:jakarta.xml.bind-api:3.0.1"

        api "jakarta.activation:jakarta.activation-api:2.0.1"
        implementation "com.sun.activation:jakarta.activation:2.0.1"

        api "jakarta.annotation:jakarta.annotation-api:2.0.0"

        api "jakarta.transaction:jakarta.transaction-api:1.3.3"
        api "jakarta.servlet:jakarta.servlet-api:5.0.0"

        api "jakarta.mail:jakarta.mail-api:2.0.1"
        implementation 'com.sun.mail:jakarta.mail:2.0.1'


        implementation "org.glassfish.jaxb:jaxb-runtime:3.0.2"
        runtimeOnly "com.sun.istack:istack-commons-runtime:4.0.1"

        implementation "org.glassfish:jsonp-jaxrs:2.0.1"

        api "jakarta.json:jakarta.json-api:2.0.1"
        implementation("org.glassfish:jakarta.json:2.0.1:module")

        api "jakarta.el:jakarta.el-api:4.0.0"
        implementation "org.glassfish:jakarta.el:4.0.1"

        api "jakarta.validation:jakarta.validation-api:3.0.0"
        implementation "org.hibernate.validator:hibernate-validator:7.0.1.Final"
        implementation "com.fasterxml:classmate:1.5.1"

        implementation "net.java.dev.jna:jna:5.10.0"

        testImplementation "org.apache.tuweni:tuweni-rlp:2.0.0"
        testImplementation "org.apache.tuweni:tuweni-bytes:2.0.0"

      }
    }
  }
}


nexusPublishing {
  repositories {
    sonatype {
      // new infrastructure
      nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
      snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
    }
  }
  clientTimeout = Duration.ofMinutes(10)
}

subprojects {

  apply plugin: "java-library"
  apply plugin: "com.diffplug.gradle.spotless"
  apply plugin: "maven-publish"
  apply plugin: "jacoco"
  apply plugin: "org.owasp.dependencycheck"
  apply plugin: "org.javamodularity.moduleplugin"
  apply plugin: "org.ec4j.editorconfig"

  repositories {
    mavenLocal()
    maven {
      url = "https://repo.maven.apache.org/maven2"
    }
  }

  task allDeps(type: DependencyReportTask) {}

  configurations.all {
    exclude group: "commons-logging"
    exclude group: "javax.activation"
    exclude group: "jakarta.activation"
    exclude group: "javax.mail"
    exclude module: "jakarta.persistence"
    exclude module: "jetty-servlet-api"
    exclude group: "io.swagger.core.v3", module: "swagger-models"
    exclude group: "io.swagger.core.v3", module: "swagger-annotations"
    exclude group: "jakarta.servlet"// TODO: when jetty fix their servlet module name change jetty-jakarta-servlet-api to jakarta.servlet
    exclude group: "javax.servlet"
    exclude group: "javax.ws.rs"

    resolutionStrategy.capabilitiesResolution.all {
      selectHighestVersion()
    }

    resolutionStrategy.eachDependency { details ->
      if (details.requested.name == "slf4j-api" && details.requested.group == "org.slf4j") {//Downgrade jetty slf4j version
        details.useTarget("org.slf4j:slf4j-api:${slf4jVersion}")
      }
    }

  }


  dependencies {

    implementation "org.slf4j:slf4j-api"
    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "ch.qos.logback:logback-core"

    testImplementation "junit:junit"
    testImplementation "org.assertj:assertj-core"
    testImplementation "org.mockito:mockito-inline"
    testImplementation "com.openpojo:openpojo"
    testImplementation("com.github.stefanbirkner:system-rules") {
      exclude group: "junit", module: "junit-dep"
    }
    testImplementation "nl.jqno.equalsverifier:equalsverifier"
  }

  test {
    systemProperty("javax.xml.bind.JAXBContextFactory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
    systemProperty("javax.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
    systemProperty("jakarta.xml.bind.JAXBContextFactory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
    systemProperty("jakarta.xml.bind.context.factory", "org.eclipse.persistence.jaxb.JAXBContextFactory")
  }

  dependencyCheck {
    failBuildOnCVSS = 0
    suppressionFile = project.getRootProject().file("cvss-suppressions.xml")
  }

  jacoco {
    toolVersion = "0.8.6"
  }

  spotless {

    lineEndings = "unix"

    java {
      // target fileTree("**/*.java")

      target fileTree('.') {
        include "**/src/main/java/**/*.java"
        include "**/src/test/java/**/*.java"
      }
      removeUnusedImports()
      googleJavaFormat("1.7")
      trimTrailingWhitespace()
      endWithNewline()
    }
    groovyGradle {
      target files(
        fileTree('.') {
          include "*.gradle"
        })
        .from("$rootDir/build.gradle")
      greclipse().configFile(rootProject.file("gradle/formatter.properties"))
      endWithNewline()
    }
  }
  jacocoTestReport {
    reports {
      xml.enabled false
      csv.enabled false
      html.enabled true
    }
  }
  jacocoTestCoverageVerification {
    violationRules {
      rule {
        element = "CLASS"
        limit {
          counter = "LINE"
          value = "COVEREDRATIO"
          minimum = 1.0
        }
        limit {
          counter = "INSTRUCTION"
          value = "COVEREDRATIO"
          minimum = 1.0
        }

        excludes = [
          "com.quorum.tessera.multitenancy.migration.Main",
          "com.quorum.tessera.passwords.ConsolePasswordReader",
          "com.quorum.tessera.passwords.PasswordReaderFactory",
          "com.quorum.tessera.enclave.rest.Main",
          "com.quorum.tessera.key.vault.azure.AzureSecretClientDelegate",
          "com.quorum.tessera.key.vault.hashicorp.KeyValueOperationsDelegateFactory",
          "com.quorum.tessera.launcher.Launcher",
          "com.quorum.tessera.launcher.Launcher.*",
          "com.quorum.tessera.launcher.Main",
          "com.quorum.tessera.passwords.ConsolePasswordReader",
          "com.quorum.tessera.passwords.PasswordReaderFactory",
          "com.quorum.tessera.enclave.rest.Main",
          "com.quorum.tessera.key.vault.azure.AzureKeyVaultClientDelegate",
          "com.quorum.tessera.key.vault.hashicorp.KeyValueOperationsDelegateFactory"
        ]
      }

    }
  }

  sourceSets {
    main {
      java {
        srcDir "src/main/java"
      }
      resources {
        srcDir "src/main/resources"
      }
    }
    test {
      java {
        srcDir "src/test/java"
      }
      resources {
        srcDir "src/test/resources"
      }
    }
  }

  sourceCompatibility = "11"

  java {
    withJavadocJar()
    withSourcesJar()
  }

  tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.WARN
  }

  tasks.withType(Copy).configureEach {
    duplicatesStrategy = DuplicatesStrategy.WARN
  }

  javadoc {
    failOnError false
    if (JavaVersion.current().isJava9Compatible()) {
      options.addBooleanOption("html5", true)
    }
  }

  publishing {

    publications {

      mavenJava(MavenPublication) { publication ->
        from components.java

        pom {
          groupId = 'net.consensys.quorum.tessera'
          url = 'https://github.com/ConsenSys/tessera'
          name = publication.artifactId
          description = 'Tessera is a stateless Java system that is used to enable the encryption, decryption, and distribution of private transactions for Quorum.'
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'https://github.com/ConsenSys/tessera/blob/master/LICENSE'
            }
          }
          developers {
            developer {
              id = "melowe"
              name = "Mark Lowe"
              email = "melowe.quorum@gmail.com"
            }
            developer {
              id = "prd-fox"
              name = "Peter Fox"
              email = "peter.rd.fox@gmail.com"
            }
            developer {
              id = "namtruong"
              name = "Nam Truong"
              email = "nam.p.truong@gmail.com"
            }
            developer {
              id = "SatpalSandhu61"
              name = "Satpal Sandhu"
              email = "quorum@satpal.co.uk"
            }
            developer {
              id = "chrishounsom"
              name = "Chris Hounsom"
              email = "chrishounsom@icloud.com"
            }
            developer {
              id = "nicolae-leonte-go"
              name = "Nicolae Leonte"
              email = "nicolae.leonte.go@gmail.com"
            }
          }
          scm {
            connection = 'scm:git:https://github.com/ConsenSys/tessera.git'
            developerConnection = 'scm:git:https://github.com/ConsenSys/tessera.git'
            url = 'https://github.com/ConsenSys/tessera'
            tag = 'HEAD'
          }
        }
      }
    }
  }


  apply plugin: "signing"

  signing {
    useGpgCmd()
    sign publishing.publications
  }

  tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
  }

  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }


  test {
    exclude "**/*IT.class"
  }


  jacocoTestCoverageVerification.dependsOn jacocoTestReport
  check.dependsOn spotlessCheck, jacocoTestCoverageVerification

}

tasks.register('incrementProjectVersion') {
  doLast {
    def versionFile = rootProject.file("version.txt")

    def currentVersion = versionFile.text.trim().replaceAll("-SNAPSHOT", "")
    def tokens = currentVersion.split("\\.")
    def majorVersion = tokens[0]
    def minorVersion = tokens[1]
    def patchVersion = tokens[2]
    def newPatchVersion = Integer.parseInt(patchVersion) + 1

    def newVersion = "$majorVersion.$minorVersion.$newPatchVersion-SNAPSHOT"

    versionFile.write(newVersion)
  }
}
