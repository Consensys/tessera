plugins {
  id "io.swagger.core.v3.swagger-gradle-plugin"
  id "java-library"
}

dependencies {

  implementation project(":tessera-jaxrs:common-jaxrs")
  implementation project(":security")
  implementation project(":shared")
  implementation project(":config")
  implementation project(":enclave:enclave-api")
  implementation project(":encryption:encryption-api")
  implementation project(":tessera-jaxrs:jaxrs-client")
  implementation project(':tessera-jaxrs:partyinfo-model')
  implementation "io.swagger.core.v3:swagger-annotations-jakarta"
  implementation project(":tessera-core")
  implementation project(":tessera-partyinfo")
  implementation project(":tessera-data")
  implementation project(":tessera-context")
  implementation project(":tessera-recover")
  implementation "org.apache.commons:commons-lang3"

  implementation "jakarta.validation:jakarta.validation-api"

  implementation "jakarta.ws.rs:jakarta.ws.rs-api"
  implementation "jakarta.xml.bind:jakarta.xml.bind-api"

  implementation "org.glassfish:jakarta.json"
  testImplementation "org.glassfish:jakarta.json"

  api "jakarta.inject:jakarta.inject-api"

  testImplementation "org.glassfish.jersey.test-framework:jersey-test-framework-core"
  testImplementation "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2"
  testImplementation "org.glassfish.jersey.media:jersey-media-json-processing"
  testImplementation "org.glassfish.jersey.media:jersey-media-moxy"
  testImplementation "org.glassfish.jersey.inject:jersey-hk2"

  compileOnly project(':tessera-jaxrs:openapi:common')
}

jar {
  manifest {
    attributes(
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Specification-Version": String.valueOf(project.version).replaceAll("-SNAPSHOT","")
      )
  }
}

def generatedResources = "${project.buildDir}/generated-resources/openapi"

resolve {
  classpath = sourceSets.main.compileClasspath.plus(sourceSets.main.runtimeClasspath)
  //buildClasspath = classpath
  outputDir = file(generatedResources)
  outputFileName = "openapi.p2p"
  outputFormat = "JSONANDYAML"
  prettyPrint = "TRUE"
  openApiFile = file("${project.projectDir}/src/main/resources/openapi-base-p2p.yaml")
  resourcePackages = [
    "com.quorum.tessera.api.common",
    "com.quorum.tessera.p2p",
    "com.quorum.tessera.thirdparty",
    "com.quorum.tessera.q2t"
  ]
  modelConverterClasses = [
    "com.quorum.tessera.openapi.FullyQualifiedNameResolver"
  ]
  filterClass = "com.quorum.tessera.openapi.P2POperationsFilter"
}

sourceSets.main.output.dir(generatedResources)

jar.dependsOn(resolve)
