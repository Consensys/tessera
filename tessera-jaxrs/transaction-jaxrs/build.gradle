plugins {
  id "io.swagger.core.v3.swagger-gradle-plugin"
  id "java-library"
}

dependencies {
  implementation project(":tessera-jaxrs:common-jaxrs")
  implementation project(":tessera-jaxrs:jaxrs-client")
  implementation project(":config")
  implementation project(":shared")
  implementation project(":tessera-core")
  implementation project(":enclave:enclave-api")
  implementation project(":encryption:encryption-api")
  implementation project(":tessera-data")
  implementation project(":tessera-context")
  implementation project(":tessera-partyinfo")
  implementation "jakarta.persistence:jakarta.persistence-api"
  implementation "org.hibernate.validator:hibernate-validator"
  implementation "io.swagger.core.v3:swagger-annotations-jakarta"
  implementation "org.glassfish:jakarta.json"

  api "jakarta.inject:jakarta.inject-api"

  implementation "jakarta.ws.rs:jakarta.ws.rs-api"
  implementation "jakarta.xml.bind:jakarta.xml.bind-api"

  compileOnly "io.swagger.core.v3:swagger-annotations-jakarta"

  // compile "jakarta.servlet:jakarta.servlet-api"
  implementation "org.apache.commons:commons-lang3"

  implementation "com.sun.mail:jakarta.mail"

  testImplementation "org.glassfish.jersey.test-framework:jersey-test-framework-core"
  testRuntimeOnly "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-grizzly2"
  testRuntimeOnly "org.glassfish.jersey.media:jersey-media-json-processing"
  testRuntimeOnly "org.glassfish.jersey.media:jersey-media-moxy"
  testRuntimeOnly "org.glassfish.jersey.inject:jersey-hk2"
  testRuntimeOnly("org.glassfish.jersey.ext:jersey-bean-validation") {
    exclude group: "jakarta.el", module: "jakarta.el-api"
  }

  // testImplementation "org.slf4j:jul-to-slf4j"
  testImplementation project(":enclave:enclave-api")

  compileOnly project(':tessera-jaxrs:openapi:common')

}

def generatedResources = "${project.buildDir}/generated-resources/openapi"

resolve {
  classpath = sourceSets.main.compileClasspath.plus(sourceSets.main.runtimeClasspath)
  outputDir = file(generatedResources)
  outputFileName = "openapi.q2t"
  outputFormat = "JSONANDYAML"
  prettyPrint = true
  openApiFile = file("${project.projectDir}/src/main/resources/openapi-base-q2t.yaml")
  resourcePackages = [
    'com.quorum.tessera.api.common',
    'com.quorum.tessera.p2p',
    'com.quorum.tessera.thirdparty',
    'com.quorum.tessera.q2t'
  ]
  modelConverterClasses = [
    "com.quorum.tessera.openapi.FullyQualifiedNameResolver"
  ]
  filterClass = "com.quorum.tessera.openapi.Q2TOperationsFilter"


}

sourceSets.main.output.dir(generatedResources)

jar.dependsOn(resolve)

jar {

  manifest {
    attributes(
      "Implementation-Title": project.name,
      "Implementation-Version": project.version,
      "Specification-Version": String.valueOf(project.version).replaceAll("-SNAPSHOT","")
      )
  }
}
